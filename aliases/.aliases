#   -------------------------------
#   1.  ENVIRONMENT CONFIGURATION
#   -------------------------------
# Go paths
    export GOPATH=~/go
    export GOBIN=$GOPATH/bin

# Export paths
    export WORKON_HOME=~/.virtualenvs
    export PATH="$PATH:/usr/local/bin/:$GOBIN"

#   Google project aliases
#   ------------------------------------------------------------
    alias google_creds='export GOOGLE_APPLICATION_CREDENTIALS=/Users/$USER/GDrive/python_code/personal/google/google_credentials/Home_assistant-a3e1f38abac0.json'

#   -----------------------------
#   2.  MAKE TERMINAL BETTER
#   -----------------------------
    alias cp='cp -iv'                                   # Preferred 'cp' implementation
    alias mv='mv -iv'                                   # Preferred 'mv' implementation
    alias mkdir='mkdir -pv'                             # Preferred 'mkdir' implementation
    alias ll='ls -FGlAhp'                               # Preferred 'ls' implementation
    alias less='less -FSRXc'                            # Preferred 'less' implementation
    alias show_options='shopt'                          # show_options: Display bash options settings
    alias fix_stty='stty sane'                          # fix_stty: Restore terminal settings when screwed up

    alias cls='clear && pwd && ls'                      # cls: Clear terminal display and ls
    alias path='echo -e ${PATH//:/\\n}'                 # path: Echo all executable Paths
    alias cic='set completion-ignore-case On'           # cic: Make tab-completion case-insensitive
    alias DT='tee ~/Desktop/terminalOut.txt'            # DT: Pipe content to file on Desktop
    alias tailDT='tail -f ~/Desktop/terminalOut.txt'    # tailDT: tail on DT'ed file
    alias showDT='ccat  ~/Desktop/terminalOut.txt'      # showDT: cat on DT'ed file

    alias git_repo='git config --get remote.origin.url'
    alias grep='grep --color=always -n'
    alias q='exit'
    alias h='history'

# Utils for python
    alias ipy='ipython notebook'

# Sourcing Envs
# -------------------------
# Anaconda environment
    exp_conda2() { export PATH="$HOME/anaconda2/bin$PATH" ;}
    exp_conda3() { export PATH="$HOME/anaconda3/bin:$PATH"; }

#  Python3 virtual environment
    src_py_vir_env () { source /usr/local/bin/virtualenvwrapper.sh; }

#  Utils for cd
    alias wpy='cd /Users/$USER/Documents/work_script'
    alias ppy='cd /Users/$USER/GDrive/python_code/personal'
    alias pyutils='cd /Users/$USER/GDrive/python_code/personal/utils'
    alias dwnlds='cd /Users/$USER/Downloads'
    alias desk='cd /Users/$USER/Desktop'
    alias docs='cd /Users/$USER/Documents'
    alias gdrive='cd /Users/$USER/GDrive/'
    alias proj='cd /Users/$USER/Projects/'

    alias ..='cd ../'                           # Go back 1 directory level
    alias .2='cd ../../'                        # Go back 2 directory levels
    alias .3='cd ../../../'                     # Go back 3 directory levels
    alias .4='cd ../../../../'                  # Go back 4 directory levels
    alias cd..='cd ../'                         # Go back 1 directory level (for fast typers)
    alias ~="cd ~"                              # Go Home

    mcd () { mkdir -p "$1" && cd "$1"; }        # mcd: Makes new Dir and jumps inside
    cd() { builtin cd "$@"; pwd; }              # Always show pwd upon 'cd'
    cdbn () {
        COUNTER=0
        while [ $COUNTER -lt "$*" ]; do
            cd ..
            let COUNTER=COUNTER+1
        done
        echo "Backed $@ folders"
    }
    books () { cd /Users/$USER/GDrive/Books; open -a Finder ./; }


# Aliases for cleanup s
    alias clean_folder='python /Users/$USER/GDrive/python_code/personal/sys_utils/clean_folder.py'
    alias image_rename='python /Users/$USER/GDrive/python_code/personal/sys_utils/image_rename.py'

# Utils for ssh to servers
    alias raspi='ssh pi@raspberrypi.local' # password for user:pi is raspberry
    narenuday () {  ssh narenuday@10.0.1.14; }

     ckh ()    # ckh: Clear Know Hosts, delete entry from ssh known hosts
     {
         sed -e "$1d" /users/$USER/.ssh/known_hosts > /dev/null
         sed -i.bak -e "$1d" /users/$USER/.ssh/known_hosts > /dev/null
      }

#   lr:  Full Recursive Directory Listing
#   ------------------------------------------
    alias lr='ls -R | grep ":$" | sed -e '\''s/:$//'\'' -e '\''s/[^-][^\/]*\//--/g'\'' -e '\''s/^/   /'\'' -e '\''s/-/|/'\'' | less'

# show and list aliases
    showa ()    # showa: to remind yourself of an alias (given some part of it)
    {
        /usr/bin/grep --color=always -i -a1 $@ ~/.aliases | grep -v '^\s*$' ;
    }
    ls_alias () # ls_alias: list all aliases
    {
        cat ~/.aliases | grep -w 'alias' ;
        cat ~/.aliases | grep -w '()' ;
    }


#   -------------------------------
#   3.  FILE AND FOLDER MANAGEMENT
#   -------------------------------

    zipf () { zip -r "$1".zip "$1" ; }    # zipf:       To create a ZIP archive of a folder
    alias nf='echo $(ls -1 | wc -l)'      # numFiles:   Count of non-hidden files in current dir

#   extract:  Extract most know archives with one command
#   ---------------------------------------------------------
    extract () {
        if [ -f $1 ] ; then
          case $1 in
            *.tar.bz2)   tar xjf $1     ;;
            *.tar.gz)    tar xzf $1     ;;
            *.bz2)       bunzip2 $1     ;;
            *.rar)       unrar e $1     ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xf $1      ;;
            *.tbz2)      tar xjf $1     ;;
            *.tgz)       tar xzf $1     ;;
            *.zip)       unzip $1       ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1        ;;
            *)     echo "'$1' cannot be extracted via extract()" ;;
             esac
         else
             echo "'$1' is not a valid file"
         fi
    }


#   ---------------------------
#   4.  SEARCHING
#   ---------------------------

    alias qfind="find . -name "                 # qfind:    Quickly search for file
    ff () { /usr/bin/find . -name "$@" ; }      # ff:       Find file under the current directory
    ffs () { /usr/bin/find . -name "$@"'*' ; }  # ffs:      Find file whose name starts with a given string
    ffe () { /usr/bin/find . -name '*'"$@" ; }  # ffe:      Find file whose name ends with a given string

#   ---------------------------
#   5.  PROCESS MANAGEMENT
#   ---------------------------

#   findPid: find out the pid of a specified process
#   -----------------------------------------------------
#       Note that the command name can be specified via a regex
#       E.g. findPid '/d$/' finds pids of all processes with names ending in 'd'
#       Without the 'sudo' it will only find processes of the current user
#   -----------------------------------------------------
    findPid () { lsof -t -c "$@" ; }

#   memHogsTop, memHogsPs:  Find memory hogs
#   -----------------------------------------------------
    alias memHogsTop='top -l 1 -o rsize | head -20'
    alias memHogsPs='ps wwaxm -o pid,stat,vsize,rss,time,command | head -10'

#   cpuHogs:  Find CPU hogs
#   -----------------------------------------------------
    alias cpu_hogs='ps wwaxr -o pid,stat,%cpu,time,command | head -10'

#   topForever:  Continual 'top' listing (every 10 seconds)
#   -----------------------------------------------------
    alias topForever='top -l 9999999 -s 10 -o cpu'

#   ttop:  Recommended 'top' invocation to minimize resources
#   ------------------------------------------------------------
    alias ttop="top -R -F -s 10 -o rsize"

#   my_ps: List processes owned by my user:
#   ------------------------------------------------------------
    my_ps() { ps $@ -u $USER -o pid,%cpu,%mem,start,time,bsdtime,command ; }


#   ---------------------------
#   6.  NETWORKING
#   ---------------------------

    alias myip='curl ip.appspot.com'                    # myip:         Public facing IP Address
    alias netCons='lsof -i'                             # netCons:      Show all open TCP/IP sockets
    alias flushDNS='dscacheutil -flushcache'            # flushDNS:     Flush out the DNS Cache
    alias lsock='sudo /usr/sbin/lsof -i -P'             # lsock:        Display open sockets
    alias lsockU='sudo /usr/sbin/lsof -nP | grep UDP'   # lsockU:       Display only open UDP sockets
    alias lsockT='sudo /usr/sbin/lsof -nP | grep TCP'   # lsockT:       Display only open TCP sockets
    alias ipInfo0='ipconfig getpacket en0'              # ipInfo0:      Get info on connections for en0
    alias ipInfo1='ipconfig getpacket en1'              # ipInfo1:      Get info on connections for en1
    alias openPorts='sudo lsof -i | grep LISTEN'        # openPorts:    All listening connections
    alias showBlocked='sudo ipfw list'                  # showBlocked:  All ipfw rules inc/ blocked IPs

#   ii:  display useful host related informaton
#   -------------------------------------------------------------------
    ii() {
        echo -e "\nYou are logged on ${RED}$HOST"
        echo -e "\nAdditionnal information:$NC " ; uname -a
        echo -e "\n${RED}Users logged on:$NC " ; w -h
        echo -e "\n${RED}Current date :$NC " ; date
        echo -e "\n${RED}Machine stats :$NC " ; uptime
        echo -e "\n${RED}Current network location :$NC " ; scselect
        echo -e "\n${RED}DNS Configuration:$NC " ; scutil --dns
        echo
    }

#   ---------------------------------------
#   7.  Sourcing aliases
#   ---------------------------------------
    unameOut="$(uname -s)"
    case "${unameOut}" in
        Linux*)     machine=Linux;;
        Darwin*)    machine=Mac;;
        CYGWIN*)    machine=Cygwin;;
        MINGW*)     machine=MinGw;;
        *)          machine="UNKNOWN:${unameOut}"
    esac

    if [ -f ~/.aliases_work ]
    then
        source ~/.aliases_work
    fi

    if [ -f ~/.aliases_kubectl ]
    then
        source ~/.aliases_kubectl
    fi

    if [ -f ~/.aliases_docker ]
    then
        source ~/.aliases_docker
    fi

    if [[ ${machine} == "Mac" ]]
    then
        source ~/.aliases_mac
    fi

#   ---------------------------------------
#   8. Note taking and todo utils
#   ---------------------------------------

# Note Taking
    note()   { vi  ~/Documents/Notes/"$*".me ;}
    n()      { mdv ~/Documents/Notes/"$*".me ;}
    nls()    { ls -c ~/Documents/Notes | egrep -i "$*" ;}
    gonote() { cd ~/Documents/Notes/ ;}

# Todo
    todo() { cd ~/Documents/Todos; vi "$*.me" ;}
    tls()  { ls -c ~/Documents/Todos | egrep -i "$*".me ;}
    ctodo() { mdv ~/Documents/Todos/"$*".me; }

#   ---------------------------------------
#   9. ag utils
#   ---------------------------------------
    replace() { ag -swl "$1" | xargs perl -pi.bak -e "s/$1/$2/g" }

#   ---------------------------------------
#   10. Code view utils
#   ---------------------------------------
    cview() { pygmentize -g "$1" }

# iTerm tab title setup
# Make sure you have below two setups in iterm
# 1- deselect all the options for window and tab titles in the
#     iterm->preferences->appearance section
# 2- set Profiles > Terminal > Terminal Emulation > Terminal may set
#     tab/window title

# Setting default tab name to CWD
echo -ne "\e]1;${PWD##*/}\a";
setTabTitle () { echo -ne "\e]1;$*\a"; }

